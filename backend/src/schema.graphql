# import * from './generated/prisma.graphql'

type Mutation {
    createMessage(text: String!, conversation: ID!): Message!
    createConversation(users: [ID!]!, messages: [ID]): Conversation
    signup(
        email: String!
        password: String!
        firstname: String!
        lastname: String!
        username: String!
        lastActivity: DateTime!
    ): User!
    signin(email: String!, password: String!): User!
    updateUserActivity(id: ID!, lastActivity: DateTime): User!
}

type Query {
    users(where: UserWhereInput, orderBy: UserOrderByInput): [User]!
    messages(where: MessageWhereInput, orderBy: MessageOrderByInput): [Message]!
    conversations(where: ConversationWhereInput): [Conversation]!
    conversation(id: ID!): Conversation
    me: User
    allUsersMeta: UserConnection!
}

type Subscription {
    newMessage(conversationId: ID!): MessageSubscriptionPayload
    newConversation(userId: ID!): ConversationSubscriptionPayload
}

type User {
    id: ID!
    email: String!
    firstname: String!
    lastname: String!
    username: String!
    conversations: [Conversation!]!
    messages: [Message!]!
}

# type Conversation {
#     id: ID!
#     users: [User!]!
#     messages: [Message!]!
# }

type Message {
    id: ID!
    text: String!
    user: User!
    conversation: Conversation!
}

type UserConnection {
    aggregate: UserConnectionAggregate!
}

type UserConnectionAggregate {
    count: Int!
}
